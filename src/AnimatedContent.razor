@using BlazorCssTransitions.AnimatedVisibilityTransitions
@using BlazorCssTransitions.Specifications

@typeparam TState

<div class=@ContainerClasses
     style=@ContainerStyles>

    @if (ChildContent is not null)
    {
        @RenderStates(
            getStateCase: state => ChildContent(state)
        )
    }

    else if (Switch is not null)
    {
        @RenderStates(
            getStateCase: Switch
        )
    }

</div>

@code {
    private RenderFragment RenderStates(Func<TState, StateSwitchCase> getStateCase)
        =>@<text>
            @if (NewStateOnTop)
            {
                var targetStateCase = getStateCase(TargetState);
                
                <AnimatedVisibility Visible
                                    Enter=@targetStateCase.Enter
                                    Exit=@targetStateCase.Exit
                                    StartWithTransition=@(StartWithTransition || HasInitialTargetStateBeenShown)
                                    Class="animated-content-item"
                                    OnShown=@OnTargetStateElementWasShown
                                    @key=@CurrentStateKey>
                    @targetStateCase.Fragment
                </AnimatedVisibility>
                
                @foreach (var pastState in PastStates.AsEnumerable().Reverse())
                {
                    var pastStateCase = getStateCase(pastState.State);

                    <AnimatedVisibility Visible="false"
                                        Enter=@pastStateCase.Enter
                                        Exit=@pastStateCase.Exit
                                        OnHidden=@(() => OnPastStateElementWasHidden(pastState))
                                        Class="animated-content-item"
                                        @key=@pastState.Key>
                        @pastStateCase.Fragment
                    </AnimatedVisibility>
                }
            }

            else
            {
                @foreach (var pastState in PastStates)
                {
                    var pastStateCase = getStateCase(pastState.State);

                    <AnimatedVisibility Visible="false"
                                        Enter=@pastStateCase.Enter
                                        Exit=@pastStateCase.Exit
                                        OnHidden=@(() => OnPastStateElementWasHidden(pastState))
                                        Class="animated-content-item"
                                        @key=@pastState.Key>
                        @pastStateCase.Fragment
                    </AnimatedVisibility>
                }

                var targetStateCase = getStateCase(TargetState);

                <AnimatedVisibility Visible
                                    Enter=@targetStateCase.Enter
                                    Exit=@targetStateCase.Exit
                                    StartWithTransition=@(StartWithTransition || HasInitialTargetStateBeenShown)
                                    Class="animated-content-item"
                                    OnShown=@OnTargetStateElementWasShown
                                    @key=@CurrentStateKey>
                    @targetStateCase.Fragment
                </AnimatedVisibility>
            }
        </text>;
}
