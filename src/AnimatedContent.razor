@using BlazorCssTransitions.AnimatedContentInternal

@typeparam TState

<div class=@ContainerClasses
     style=@ContainerStyles>

    @if (ChildContent is not null
        || Switch is not null)
    {
        @RenderStates()
    }

</div>

@code {

    private RenderFragment RenderStates()
    {
        var paramsOfStatesToRender = _elementsCollection.ListForRead(
            fromTarget: !NewStateOnTop);

        return
            @<text>
                @foreach (var parameters in paramsOfStatesToRender)
                {
                    <AnimatedVisibility Visible=@(parameters.Visible)
                                        Enter=@(parameters.Enter)
                                        Exit=@(parameters.Exit)
                                        StartWithTransition=@(parameters.StartWithTransition)
                                        OnStateChanged=@(parameters.OnStateChanged)
                                        Class="animated-content-item"
                                        Style=@BuildStyleForElement(parameters)
                                        DisappearWhenHidden=@PreserveHiddenElements
                                        @key=@(parameters.Key)>
                        @(parameters.Fragment)
                    </AnimatedVisibility>
                }
            </text>;
    }

    private const string _keepContentInBoundsStyle = "min-height: 0;";

    private string BuildStyleForElement(StateElementsCollection<TState>.IElementForRead element)
    {
        string style = "";

        if (KeepContentInBounds)
            style += _keepContentInBoundsStyle;
        if (PreserveHiddenElements)
            style += $"z-index: {_elementsCollection.GetZIndexForElement(element, descendingFromTarget: NewStateOnTop)};";

        return style;
    }
}
