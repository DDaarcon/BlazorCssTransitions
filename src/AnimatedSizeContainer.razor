@using BlazorCssTransitions.Help
@using BlazorCssTransitions.JsInterop
@using BlazorCssTransitions.Specifications

@inject JsInteropEntryPoint _jsInteropEntryPoint

<div class=@ContainerClass
     style=@ContainerStyle>

    <div class="animated-size-container-mask"
         @ref=@MaskReference>
        @ChildContent
    </div>

</div>

@code {

    [Parameter, EditorRequired]
    public required RenderFragment ChildContent { get; set; }

    [Parameter]
    public Specification? Spec { get; set; }
    private Specification _spec = default!;
    private readonly static Specification _defaultSpec = Specification.Linear();

    [Parameter]
    public bool FillWidth { get; set; }
    [Parameter]
    public bool FillHeight { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    /// <summary>
    /// Forces recalculation
    /// </summary>
    public async Task Recalculate()
    {
        await UpdateTargetSize();
    }


    private ElementReference MaskReference { get; set; }

    private string ContainerClass
    {
        get
        {
            IEnumerable<string> classes = [_containerClass];
            if (FillHeight)
                classes = classes.Append(_fillHeightClass);
            if (FillWidth)
                classes = classes.Append(_fillWidthClass);
            if (!String.IsNullOrEmpty(Class))
                classes = classes.Append(Class);

            return String.Join(" ", classes);
        }
    }
    private const string _containerClass = "animated-size-container";
    private const string _fillWidthClass = "fill-width";
    private const string _fillHeightClass = "fill-height";

    private string ContainerStyle
    {
        get
        {
            IEnumerable<string> styles = [_spec.GetStyle(animatedProperty: "all")];
            if (!FillHeight && _afterFirstRender)
                styles = styles.Append($"height: {_containerHeight.ToCss()}px;");
            if (!FillWidth && _afterFirstRender)
                styles = styles.Append($"width: {_containerWidth.ToCss()}px;");
            if (!String.IsNullOrEmpty(Style))
                styles = styles.Append(Style);

            return String.Join(" ", styles);
        }
    }

    private double _containerHeight;
    private double _containerWidth;
    private bool _afterFirstRender;

    protected override void OnParametersSet()
    {
        _spec = Spec ?? _defaultSpec;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _afterFirstRender = true;

        await UpdateTargetSize();
    }

    private async Task UpdateTargetSize()
    {
        var maskSize = await _jsInteropEntryPoint.MeasureElementScroll(MaskReference);

        if (_containerHeight != maskSize.Height
            || _containerWidth != maskSize.Width)
        {
            _containerHeight = maskSize.Height;
            _containerWidth = maskSize.Width;
            StateHasChanged();
        }
    }
}